import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../services/firebase_service.dart';
import '../models/teacher.dart';
import '../models/schedule_slot.dart';
import '../models/week_settings.dart';
import '../models/class.dart';
final dayNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
final timeSlots = ['8:00 - 9:30', '10:00 - 11:30', '12:00 - 1:30', '2:00 - 3:30', '4:00 - 5:30'];


class ScheduleScreen extends StatefulWidget {
  @override
  _ScheduleScreenState createState() => _ScheduleScreenState();
}

class _ScheduleScreenState extends State<ScheduleScreen> {
  final FirebaseService _firebaseService = FirebaseService();
  List<Teacher> _teachers = [];
  List<ScheduleSlot> _scheduleSlots = [];
  List<WeekSettings> _weekSettings = [];
  bool _isLoading = true;
  DateTime _currentWeekStart = DateTime.now().subtract(Duration(days: DateTime.now().weekday % 7));
  String _previousWeekKey = '';

  // Week navigation
  void _goToPreviousWeek() {
    setState(() {
      _previousWeekKey = _getWeekKey(_currentWeekStart);
      _currentWeekStart = _currentWeekStart.subtract(Duration(days: 7));
      _loadData(checkIfEmpty: true);
    });
  }

  void _goToNextWeek() {
    setState(() {
      _previousWeekKey = _getWeekKey(_currentWeekStart);
      _currentWeekStart = _currentWeekStart.add(Duration(days: 7));
      _loadData(checkIfEmpty: true);
    });
  }

  String _formatWeekDisplay() {
    final endDate = _currentWeekStart.add(Duration(days: 6));
    final startFormat = DateFormat('MMM d');
    final endFormat = DateFormat('MMM d, yyyy');
    return '${startFormat.format(_currentWeekStart)} - ${endFormat.format(endDate)}';
  }

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  Future<void> _loadData({bool checkIfEmpty = false}) async {
    setState(() => _isLoading = true);
    final weekKey = _getWeekKey(_currentWeekStart);

    try {
      _teachers = await _firebaseService.getTeachers();
      _scheduleSlots = await _firebaseService.getScheduleSlotsByWeek(weekKey);
      _weekSettings = await _firebaseService.getWeekSettings();

      if (checkIfEmpty && _scheduleSlots.isEmpty && _previousWeekKey.isNotEmpty) {
        _promptCopyFromPreviousWeek();
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Error loading data: ${e.toString()}"),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  void _promptCopyFromPreviousWeek() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text("Empty Schedule"),
        content: Text("This week has no assignments. Would you like to copy all assignments from the previous week?"),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text("No"),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(context);
              await _copyFromPreviousWeek();
            },
            child: Text("Yes, Copy"),
          ),
        ],
      ),
    );
  }

  Future<void> _copyFromPreviousWeek() async {
    setState(() => _isLoading = true);
    try {
      final previousSlots = await _firebaseService.getScheduleSlotsByWeek(_previousWeekKey);
      final currentWeekKey = _getWeekKey(_currentWeekStart);

      // Create new slots for current week based on previous week
      for (var slot in previousSlots) {
        await _firebaseService.assignTeacherToSlot(
            slot.classId,
            slot.dayIndex,
            slot.slotIndex,
            slot.teacherId,
            currentWeekKey
        );
      }

      // Reload the data
      _scheduleSlots = await _firebaseService.getScheduleSlotsByWeek(currentWeekKey);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Assignments copied from previous week"),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Error copying assignments: ${e.toString()}"),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  String _getWeekKey(DateTime date) => DateFormat('yyyy-MM-dd').format(date);

  void _showAddTeacherDialog() {
    TextEditingController nameController = TextEditingController();
    TextEditingController hoursController = TextEditingController(text: "20");
    String gender = 'male';

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text("Add Teacher"),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: nameController,
                  decoration: InputDecoration(
                    labelText: "Teacher Name",
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.person),
                  ),
                ),
                SizedBox(height: 16),
                TextField(
                  controller: hoursController,
                  decoration: InputDecoration(
                    labelText: "Max Hours Per Week",
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.access_time),
                  ),
                  keyboardType: TextInputType.number,
                ),
                SizedBox(height: 16),
                DropdownButtonFormField<String>(
                  value: gender,
                  decoration: InputDecoration(
                    labelText: "Gender",
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.people),
                  ),
                  items: [
                    DropdownMenuItem(value: 'male', child: Text('Male')),
                    DropdownMenuItem(value: 'female', child: Text('Female')),
                    DropdownMenuItem(value: 'other', child: Text('Other')),
                  ],
                  onChanged: (value) {
                    gender = value!;
                  },
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text("Cancel"),
            ),
            ElevatedButton(
              onPressed: () async {
                if (nameController.text.trim().isNotEmpty) {
                  int maxHours = int.tryParse(hoursController.text) ?? 20;
                  await _firebaseService.addTeacher(
                      nameController.text,
                      gender,
                      maxHours
                  );
                  _loadData();
                  Navigator.pop(context);
                }
              },
              child: Text("Add"),
            ),
          ],
        );
      },
    );
  }

  void _deleteTeacher(String id) async {
    // Confirmation dialog
    bool confirm = await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text("Confirm Deletion"),
        content: Text("Are you sure you want to remove this teacher? This will also remove them from all assigned slots."),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: Text("Cancel"),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context, true),
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: Text("Delete"),
          ),
        ],
      ),
    ) ?? false;

    if (confirm) {
      await _firebaseService.deleteTeacher(id);
      _loadData();
    }
  }

  int _getAssignedHours(String teacherId) {
    return _scheduleSlots.where((slot) => slot.teacherId == teacherId).length;
  }

  void _editTeacher(Teacher teacher) {
    TextEditingController nameController = TextEditingController(text: teacher.name);
    TextEditingController hoursController = TextEditingController(text: teacher.maxHoursPerWeek.toString());
    String gender = teacher.gender;

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text("Edit Teacher"),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: nameController,
                  decoration: InputDecoration(
                    labelText: "Teacher Name",
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.person),
                  ),
                ),
                SizedBox(height: 16),
                TextField(
                  controller: hoursController,
                  decoration: InputDecoration(
                    labelText: "Max Hours Per Week",
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.access_time),
                  ),
                  keyboardType: TextInputType.number,
                ),
                SizedBox(height: 16),
                DropdownButtonFormField<String>(
                  value: gender,
                  decoration: InputDecoration(
                    labelText: "Gender",
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.people),
                  ),
                  items: [
                    DropdownMenuItem(value: 'male', child: Text('Male')),
                    DropdownMenuItem(value: 'female', child: Text('Female')),
                    DropdownMenuItem(value: 'other', child: Text('Other')),
                  ],
                  onChanged: (value) {
                    gender = value!;
                  },
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text("Cancel"),
            ),
            ElevatedButton(
              onPressed: () async {
                if (nameController.text.trim().isNotEmpty) {
                  int maxHours = int.tryParse(hoursController.text) ?? 20;
                  await _firebaseService.updateTeacher(
                      teacher.id,
                      nameController.text,
                      gender,
                      maxHours
                  );
                  _loadData();
                  Navigator.pop(context);
                }
              },
              child: Text("Save"),
            ),
          ],
        );
      },
    );
  }

  Widget _buildTeacherList() {
    return Container(
      width: 280,
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.3),
            blurRadius: 5,
            offset: Offset(2, 0),
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            padding: EdgeInsets.symmetric(vertical: 16, horizontal: 8),
            color: Colors.blue[700],
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  "Teachers",
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 20,
                    color: Colors.white,
                  ),
                ),
                ElevatedButton.icon(
                  icon: Icon(Icons.add),
                  label: Text("Add"),
                  onPressed: _showAddTeacherDialog,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.white,
                    foregroundColor: Colors.blue[700],
                  ),
                ),
              ],
            ),
          ),
          Expanded(
            child: _teachers.isEmpty
                ? Center(
              child: Text(
                "No teachers yet.\nClick 'Add' to create one.",
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey[600]),
              ),
            )
                : ListView.separated(
              itemCount: _teachers.length,
              separatorBuilder: (context, index) => Divider(height: 1),
              itemBuilder: (context, index) {
                final teacher = _teachers[index];
                final assignedHours = _getAssignedHours(teacher.id);
                final remainingHours = teacher.maxHoursPerWeek - assignedHours;

                return Draggable<Teacher>(
                  data: teacher,
                  feedback: Material(
                    elevation: 4,
                    borderRadius: BorderRadius.circular(8),
                    child: Container(
                      padding: EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.blue[100],
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(color: Colors.blue[700]!),
                      ),
                      child: Text(
                        teacher.name,
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                    ),
                  ),
                  child: ListTile(
                    contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    leading: CircleAvatar(
                      backgroundColor: remainingHours <= 0 ? Colors.red : Colors.blue,
                      child: Icon(
                        teacher.gender == 'female' ? Icons.female : Icons.male,
                        color: Colors.white,
                      ),
                    ),
                    title: Text(
                      teacher.name,
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        SizedBox(height: 4),
                        _buildProgressIndicator(assignedHours, teacher.maxHoursPerWeek),
                        SizedBox(height: 4),
                        Text(
                          "Hours: $assignedHours/${teacher.maxHoursPerWeek} (${remainingHours} remaining)",
                          style: TextStyle(
                            color: remainingHours <= 0 ? Colors.red : Colors.black87,
                            fontWeight: remainingHours <= 0 ? FontWeight.bold : FontWeight.normal,
                          ),
                        ),
                      ],
                    ),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        IconButton(
                          icon: Icon(Icons.edit, color: Colors.blue),
                          onPressed: () => _editTeacher(teacher),
                          tooltip: "Edit",
                        ),
                        IconButton(
                          icon: Icon(Icons.delete, color: Colors.red),
                          onPressed: () => _deleteTeacher(teacher.id),
                          tooltip: "Delete",
                        ),
                      ],
                    ),
                    isThreeLine: true,
                  ),
                  childWhenDragging: Container(
                    height: 80,
                    color: Colors.grey[100],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  // Helper method to build the overall day cell for a class
// Helper method to build the overall day cell for a class
  Widget _buildClassDayCell(String classId, int dayIndex) {
    final dayScheduleSlots = _scheduleSlots.where(
            (slot) => slot.classId == classId && slot.dayIndex == dayIndex
    ).toList();

    return Container(
      width: 150,
      height: 40,
      decoration: BoxDecoration(
        color: Colors.grey[100],
        border: Border.all(color: Colors.grey[300]!),
      ),
      child: Center(
        child: Text(
          "${dayScheduleSlots.length} sessions",
          style: TextStyle(
            color: Colors.blue[800],
            fontWeight: FontWeight.w500,
          ),
        ),
      ),
    );
  }



  Widget _buildProgressIndicator(int assigned, int max) {
    final double percentage = max > 0 ? assigned / max : 0;
    final Color progressColor = percentage >= 1
        ? Colors.red
        : percentage >= 0.8
        ? Colors.orange
        : Colors.green;

    return Container(
      height: 8,
      width: double.infinity,
      decoration: BoxDecoration(
        color: Colors.grey[300],
        borderRadius: BorderRadius.circular(4),
      ),
      child: FractionallySizedBox(
        alignment: Alignment.centerLeft,
        widthFactor: percentage.clamp(0.0, 1.0),
        child: Container(
          decoration: BoxDecoration(
            color: progressColor,
            borderRadius: BorderRadius.circular(4),
          ),
        ),
      ),
    );
  }

// Replace the existing schedule grid with this new implementation
// Replace the existing schedule grid with this new implementation
  Widget _buildScheduleGrid() {
    if (_isLoading) {
      return Center(child: CircularProgressIndicator());
    }

    if (_classes.isEmpty) {
      return Center(
        child: Text(
          "No classes available.\nPlease add classes first.",
          textAlign: TextAlign.center,
          style: TextStyle(fontSize: 16, color: Colors.grey[600]),
        ),
      );
    }

    return Column(
      children: [
        // Header with class names (X-axis)
        Row(
          children: [
            // Empty corner cell
            Container(
              width: 120,
              height: 60,
              decoration: BoxDecoration(
                color: Colors.blue[900],
                border: Border.all(color: Colors.grey[300]!),
              ),
              child: Center(
                child: Text(
                  "Day / Class",
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ),
            ),
            // Class names in header
            Expanded(
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Row(
                  children: _classes.map((aClass) {
                    return Container(
                      width: 150,
                      height: 60,
                      decoration: BoxDecoration(
                        color: Colors.blue[800],
                        border: Border.all(color: Colors.grey[300]!),
                      ),
                      child: Center(
                        child: Text(
                          aClass.name,
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                    );
                  }).toList(),
                ),
              ),
            ),
          ],
        ),

        // Schedule rows (days and timeslots - Y-axis)
        Expanded(
          child: SingleChildScrollView(
            child: Column(
              children: List.generate(dayNames.length, (dayIndex) {
                return Column(
                  children: [
                    // Day name row
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Day label
                        Container(
                          width: 120,
                          height: 40,
                          decoration: BoxDecoration(
                            color: Colors.blue[700],
                            border: Border.all(color: Colors.grey[300]!),
                          ),
                          child: Center(
                            child: Text(
                              dayNames[dayIndex],
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                color: Colors.white,
                              ),
                            ),
                          ),
                        ),

                        // Slots for each class for this day
                        Expanded(
                          child: SingleChildScrollView(
                            scrollDirection: Axis.horizontal,
                            child: Row(
                              children: _classes.map((aClass) {
                                return _buildClassDayCell(aClass.id, dayIndex);
                              }).toList(),
                            ),
                          ),
                        ),
                      ],
                    ),

                    // Time slots for this day
                    Column(
                      children: List.generate(timeSlots.length, (slotIndex) {
                        return Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Time slot label (Y1 axis)
                            Container(
                              width: 120,
                              height: 80,
                              decoration: BoxDecoration(
                                color: Colors.blue[50],
                                border: Border.all(color: Colors.grey[300]!),
                              ),
                              child: Center(
                                child: Text(
                                  timeSlots[slotIndex],
                                  style: TextStyle(
                                    fontWeight: FontWeight.w500,
                                    color: Colors.blue[900],
                                  ),
                                ),
                              ),
                            ),

                            // Class cells for this time slot
                            Expanded(
                              child: SingleChildScrollView(
                                scrollDirection: Axis.horizontal,
                                child: Row(
                                  children: _classes.map((aClass) {
                                    return _buildTimeSlotCell(aClass.id, dayIndex, slotIndex);
                                  }).toList(),
                                ),
                              ),
                            ),
                          ],
                        );
                      }),
                    ),
                  ],
                );
              }),
            ),
          ),
        ),
      ],
    );
  }

// Helper method to build a single time slot cell
  Widget _buildTimeSlotCell(String classId, int dayIndex, int slotIndex) {
    // Find the existing slot for this class, day, and time if it exists
    final slot = _scheduleSlots.firstWhere(
          (slot) => slot.classId == classId &&
          slot.dayIndex == dayIndex &&
          slot.slotIndex == slotIndex,
      orElse: () => ScheduleSlot(
        id: '',
        dayIndex: dayIndex,
        slotIndex: slotIndex,
        classId: classId,
        teacherId: '',
        weekKey: _getWeekKey(_currentWeekStart),
      ),
    );


    // Find the assigned teacher if any
    Teacher? assignedTeacher;
    if (slot.teacherId.isNotEmpty) {
      try {
        assignedTeacher = _teachers.firstWhere((t) => t.id == slot.teacherId);
      } catch (e) {
        // Teacher not found, might have been deleted
        assignedTeacher = null;
      }
    }

    return DragTarget<Teacher>(
      builder: (context, candidateData, rejectedData) {
        return Container(
          width: 150,
          height: 80,
          decoration: BoxDecoration(
            color: candidateData.isNotEmpty
                ? Colors.green[100]
                : assignedTeacher != null
                ? Colors.blue[100]
                : Colors.white,
            border: Border.all(
              color: candidateData.isNotEmpty
                  ? Colors.green
                  : Colors.grey[300]!,
            ),
          ),
          child: assignedTeacher != null
              ? Stack(
            children: [
              Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
                      assignedTeacher.gender == 'female'
                          ? Icons.female
                          : Icons.male,
                      color: Colors.blue[700],
                    ),
                    Text(
                      assignedTeacher.name,
                      textAlign: TextAlign.center,
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                  ],
                ),
              ),
              Positioned(
                top: 0,
                right: 0,
                child: IconButton(
                  icon: Icon(Icons.close, size: 16, color: Colors.red),
                  onPressed: () => _removeTeacherFromSlot(slot),
                  constraints: BoxConstraints.tight(Size(24, 24)),
                  padding: EdgeInsets.zero,
                ),
              ),
            ],
          )
              : Center(
            child: Text(
              "Drop instructor here",
              textAlign: TextAlign.center,
              style: TextStyle(
                color: Colors.grey[400],
                fontSize: 12,
              ),
            ),
          ),
        );
      },
      onAccept: (Teacher teacher) {
        _assignTeacherToSlot(classId, dayIndex, slotIndex, teacher);
      },
      onWillAccept: (Teacher? teacher) {
        if (teacher == null) return false;

        // Check if the teacher has reached maximum hours
        int assignedHours = _getAssignedHours(teacher.id);
        if (assignedHours >= teacher.maxHoursPerWeek) return false;

        return true;
      },
    );
  }

// This function handles assigning a teacher to a specific slot
  void _assignTeacherToSlot(String classId, int dayIndex, int slotIndex, Teacher teacher) async {
    final weekKey = _getWeekKey(_currentWeekStart);

    try {
      await _firebaseService.assignTeacherToSlot(
          classId, dayIndex, slotIndex, teacher.id, weekKey
      );
      setState(() {
        _loadData();
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("${teacher.name} assigned successfully"),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Error assigning instructor: ${e.toString()}"),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

// This function handles removing a teacher from a slot
  void _removeTeacherFromSlot(ScheduleSlot slot) async {
    try {
      await _firebaseService.removeTeacherFromSlot(slot.id);
      setState(() {
        _loadData();
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Instructor removed successfully"),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Error removing instructor: ${e.toString()}"),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

// Modify the build method to use the new grid and add class management
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Class Schedule Manager"),
        backgroundColor: Colors.blue[900],
        actions: [
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: () => _loadData(),
            tooltip: "Refresh data",
          ),
          TextButton.icon(
            icon: Icon(Icons.class_, color: Colors.white),
            label: Text("Manage Classes", style: TextStyle(color: Colors.white)),
            onPressed: () {
              setState(() {
                _showingClassManagement = !_showingClassManagement;
              });
            },
          ),
        ],
      ),
      body: Column(
        children: [
          // Week Navigation
          Container(
            padding: EdgeInsets.all(16),
            color: Colors.blue[50],
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                IconButton(
                  icon: Icon(Icons.chevron_left),
                  onPressed: _goToPreviousWeek,
                  tooltip: "Previous Week",
                ),
                Text(
                  _formatWeekDisplay(),
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                IconButton(
                  icon: Icon(Icons.chevron_right),
                  onPressed: _goToNextWeek,
                  tooltip: "Next Week",
                ),
              ],
            ),
          ),

          // Main Content Area
          Expanded(
            child: Row(
              children: [
                // Teacher List
                _buildTeacherList(),

                // Schedule Grid or Class Management
                Expanded(
                  child: _showingClassManagement
                      ? _buildClassManagement()
                      : _buildScheduleGrid(),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // This function handles assigning a teacher to a specific slot
  void _assignTeacherToSlot(String classId, int dayIndex, int slotIndex, Teacher teacher) async {
    final weekKey = _getWeekKey(_currentWeekStart);

    try {
      await _firebaseService.assignTeacherToSlot(
          classId, dayIndex, slotIndex, teacher.id, weekKey
      );
      setState(() {
        _loadData();
      });


      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("${teacher.name} assigned successfully"),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Error assigning instructor: ${e.toString()}"),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

// This function handles removing a teacher from a slot
  void _removeTeacherFromSlot(ScheduleSlot slot) async {
    try {
      await _firebaseService.removeTeacherFromSlot(slot.id);
      setState(() {
        _loadData();
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Instructor removed successfully"),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Error removing instructor: ${e.toString()}"),
          backgroundColor: Colors.red,
        ),
      );
    }
  }


// Add this method to build the class management UI
  Widget _buildClassManagement() {
s    return Container(
      padding: EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                "Class Management",
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.blue[900],
                ),
              ),
              ElevatedButton.icon(
                icon: Icon(Icons.add),
                label: Text("Add Class"),
                onPressed: _showAddClassDialog,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue[700],
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          ),
          SizedBox(height: 16),
          Expanded(
            child: _classes.isEmpty
                ? Center(
              child: Text(
                "No classes yet.\nClick 'Add Class' to create one.",
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey[600]),
              ),
            )
                : ListView.builder(
              itemCount: _classes.length,
              itemBuilder: (context, index) {
                final academicClass = _classes[index];
                return Card(
                  margin: EdgeInsets.only(bottom: 16),
                  elevation: 2,
                  child: ListTile(
                    contentPadding: EdgeInsets.all(16),
                    leading: CircleAvatar(
                      backgroundColor: Colors.blue[700],
                      child: Icon(Icons.school, color: Colors.white),
                    ),
                    title: Text(
                      academicClass.name,
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        SizedBox(height: 8),
                        Text("Level: ${_formatAcademicLevel(academicClass.academicLevel)}"),
                        SizedBox(height: 4),
                        Text(academicClass.description),
                      ],
                    ),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        IconButton(
                          icon: Icon(Icons.edit, color: Colors.blue),
                          onPressed: () => _editClass(academicClass),
                          tooltip: "Edit Class",
                        ),
                        IconButton(
                          icon: Icon(Icons.delete, color: Colors.red),
                          onPressed: () => _deleteClass(academicClass.id),
                          tooltip: "Delete Class",
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
  // Helper function to format academic level
  String _formatAcademicLevel(String level) {
    switch (level) {
      case 'undergraduate':
        return 'Undergraduate';
      case 'graduate':
        return 'Graduate';
      case 'doctoral':
        return 'Doctoral';
      case 'certificate':
        return 'Certificate';
      default:
        return level.substring(0, 1).toUpperCase() + level.substring(1);
    }
  }

  Widget _buildScheduleCell(int day, int slot) {
    final List<ScheduleSlot> cellSlots = _scheduleSlots.where(
            (s) => s.dayIndex == day.toString() && s.slotIndex == slot.toString() && s.teacherId.isNotEmpty
    ).toList();

    List<Teacher> assignedTeachers = [];
    for (var scheduleSlot in cellSlots) {
      final matchingTeachers = _teachers.where((t) => t.id == scheduleSlot.teacherId);
      if (matchingTeachers.isNotEmpty) {
        assignedTeachers.add(matchingTeachers.first);
      }
    }

    return DragTarget<Teacher>(
      onAccept: (teacher) async {
        final int assignedHours = _getAssignedHours(teacher.id);

        if (assignedHours >= teacher.maxHoursPerWeek) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text("${teacher.name} has already reached maximum hours (${teacher.maxHoursPerWeek})."),
              backgroundColor: Colors.red,
            ),
          );
          return;
        }

        bool alreadyAssigned = cellSlots.any((slot) => slot.teacherId == teacher.id);
        if (alreadyAssigned) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text("${teacher.name} is already assigned to this slot."),
              backgroundColor: Colors.orange,
            ),
          );
          return;
        }

        await _firebaseService.assignTeacherToSlot(
            day.toString(),
            slot.toString(),
            teacher.id,
            _getWeekKey(_currentWeekStart)
        );

        _loadData();
      },
      builder: (context, candidateData, rejectedData) {
        return Container(
          padding: EdgeInsets.all(8),
          decoration: BoxDecoration(
            border: Border.all(
              color: candidateData.isNotEmpty ? Colors.blue : Colors.transparent,
              width: 2,
            ),
            color: candidateData.isNotEmpty ? Colors.blue[50] : null,
          ),
          child: assignedTeachers.isNotEmpty
              ? Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ...assignedTeachers.map((teacher) => Padding(
                padding: const EdgeInsets.only(bottom: 8.0),
                child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                  decoration: BoxDecoration(
                    color: Colors.blue[100],
                    borderRadius: BorderRadius.circular(4),
                    border: Border.all(color: Colors.grey[700]!),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Expanded(
                        child: Text(
                          teacher.name,
                          textAlign: TextAlign.center,
                          style: TextStyle(fontWeight: FontWeight.bold),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      InkWell(
                        onTap: () async {
                          final slotToRemove = cellSlots.firstWhere(
                                (slot) => slot.teacherId == teacher.id,
                            orElse: () => ScheduleSlot(
                                id: '',
                                classIndex: day.toString(),
                                slotIndex: slot.toString(),
                                teacherId: teacher.id,
                                weekKey: _getWeekKey(_currentWeekStart)
                            ),
                          );

                          await _firebaseService.removeTeacherFromSlot(
                              day.toString(),
                              slot.toString(),
                              _getWeekKey(_currentWeekStart),
                              teacherId: teacher.id
                          );

                          _loadData();
                        },
                        child: Icon(
                          Icons.close,
                          size: 16,
                          color: Colors.red,
                        ),
                      ),
                    ],
                  ),
                ),
              )),
              if (assignedTeachers.length < 3)
                Text(
                  "Drop teacher here to add more",
                  style: TextStyle(
                    color: Colors.grey[400],
                    fontStyle: FontStyle.italic,
                    fontSize: 12,
                  ),
                  textAlign: TextAlign.center,
                ),
            ],
          )
              : Center(
            child: Text(
              "Drop teacher here",
              style: TextStyle(
                color: Colors.grey[400],
                fontStyle: FontStyle.italic,
              ),
              textAlign: TextAlign.center,
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Teacher Schedule Management"),
        backgroundColor: Colors.grey[500],
        actions: [
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: _loadData,
            tooltip: "Refresh Data",
          ),
        ],
      ),
      body: _isLoading
          ? Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text("Loading schedule data..."),
          ],
        ),
      )
          : Container(
        color: Colors.grey[100],
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            _buildTeacherList(),
            Expanded(
              child: Container(
                margin: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(8),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.withOpacity(0.2),
                      blurRadius: 5,
                      offset: Offset(0, 2),
                    ),
                  ],
                ),
                child: _buildScheduleGrid(),
              ),
            ),
          ],
        ),
      ),
    );
  }
}